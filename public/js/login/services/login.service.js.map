{"version":3,"sources":["login/services/login.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;YAYA;gBAEK,qCAAqC;gBACrC,sBAAqB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;gBAAG,CAAC;gBAEvC,4BAAK,GAAL,UAAO,IAAI;oBAEJ,6DAA6D;oBAC7D,IAAI,UAAU,GAAG,QAAQ,GAAC,IAAI,CAAC,KAAK,GAAE,YAAY,GAAC,IAAI,CAAC,QAAQ,CAAC;oBAEjE,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,mCAAmC,EAAC,CAAC,CAAC;oBAElF,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,0BAA0B;oBAElF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,wBAAwB;yBAC3D,GAAG,CAAC,UAAA,QAAQ,IAAM,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA,CAAA,CAAC,CAAC,CAAC,wDAAwD;yBACnG,KAAK,CAAC,UAAC,KAAS,IAAK,OAAA,eAAU,CAAC,KAAK,CAAC,KAAK,IAAI,cAAc,CAAE,EAA1C,CAA0C,CAAC,CAAC,CAAC,kBAAkB;gBAC1G,CAAC;gBAED,kCAAW,GAAX,UAAY,IAAS,IAAU,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;gBACtD,kCAAW,GAAX,cAAqB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBArBhD;oBAAC,iBAAU,EAAE;;gCAAA;gBAuBb,mBAAC;YAAD,CAtBA,AAsBC,IAAA;YAtBD,uCAsBC,CAAA","file":"login/services/login.service.js","sourcesContent":["/* * * ./app/comments/components/comment.service.ts * * */\n// Imports\nimport { Injectable }     from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\nimport { Login }           from '../model/login';\nimport {Observable} from 'rxjs/Rx';\n\n// Import RxJs required methods\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\n\n@Injectable()\nexport class LoginService {\n     userData: any;\n     // Resolve HTTP using the constructor\n     constructor (private http: Http) {}\n\n Login (body): Observable<Login[]> {\n\n        //let bodyString = JSON.stringify(body); // Stringify payload\n        var bodyString = 'email='+body.email +'&password='+body.password;\n\n        let headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded'});\n\n        let options = new RequestOptions({ headers: headers }); // Create a request option\n\n        return this.http.post('/login', bodyString, options) // ...using post request\n                         .map(response => { return response.json()}) // ...and calling .json() on the response to return data\n                         .catch((error:any) => Observable.throw(error || 'Server error' )); //...errors if any\n    }\n\n    setUserData(data: any): void { this.userData = data; }\n    getUserData(): any { return this.userData; }\n\n}\n"],"sourceRoot":"/source/"}