{"version":3,"sources":["log/services/logService.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAWA;gBAIK,qCAAqC;gBACrC,oBAAqB,IAAU,EAAS,EAAgB,EAAS,QAAkB;oBAA9D,SAAI,GAAJ,IAAI,CAAM;oBAAS,OAAE,GAAF,EAAE,CAAc;oBAAS,aAAQ,GAAR,QAAQ,CAAU;gBAAG,CAAC;gBAE3F,4BAAO,GAAP,UAAS,KAAK;oBAEN,IAAI,CAAC,IAAI,GAAI,IAAI,IAAI,EAAE,CAAC;oBACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;oBACtE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACxB,IAAI,UAAU,GAAG,aAAa,GAAC,KAAK,GAAE,WAAW,GAAC,IAAI,CAAC,IAAI,CAAC;oBAE5D,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,mCAAmC,EAAC,CAAC,CAAC;oBAElF,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,0BAA0B;oBAElF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,wBAAwB;yBAC7D,GAAG,CAAC,UAAA,QAAQ,IAAM,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA,CAAA,CAAC,CAAC,CAAC,wDAAwD;yBACnG,KAAK,CAAC,UAAC,KAAS,IAAK,OAAA,eAAU,CAAC,KAAK,CAAC,KAAK,IAAI,cAAc,CAAE,EAA1C,CAA0C,CAAC,CAAC,CAAC,kBAAkB;gBAC1G,CAAC;gBAED,6BAAQ,GAAR,UAAU,KAAK,EAAC,MAAM;oBACd,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;oBACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;oBAEvE,IAAI,UAAU,GAAG,aAAa,GAAC,KAAK,GAAE,WAAW,GAAC,IAAI,CAAC,IAAI,GAAE,UAAU,GAAG,MAAM,CAAC;oBAEjF,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,mCAAmC,EAAC,CAAC,CAAC;oBAElF,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,0BAA0B;oBAElF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,wBAAwB;yBAC9D,GAAG,CAAC,UAAA,QAAQ,IAAM,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA,CAAA,CAAC,CAAC,CAAC,wDAAwD;yBACnG,KAAK,CAAC,UAAC,KAAS,IAAK,OAAA,eAAU,CAAC,KAAK,CAAC,KAAK,IAAI,cAAc,CAAE,EAA1C,CAA0C,CAAC,CAAC,CAAC,kBAAkB;gBAC1G,CAAC;gBACD,4BAAO,GAAP;oBACK,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC;oBACtC,uBAAuB;oBACvB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;yBAErC,GAAG,CAAC,UAAA,QAAQ,IAAM,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA,CAAA,CAAC,CAAC;yBAE1C,KAAK,CAAC,UAAC,KAAS,IAAK,OAAA,eAAU,CAAC,KAAK,CAAC,KAAK,IAAI,cAAc,CAAC,EAAzC,CAAyC,CAAC,CAAC;gBAErF,CAAC;gBAED,2BAAM,GAAN;oBACS,uBAAuB;oBACvB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;yBAEd,GAAG,CAAC,UAAA,QAAQ,IAAM,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA,CAAA,CAAC,CAAC;yBAE1C,KAAK,CAAC,UAAC,KAAS,IAAK,OAAA,eAAU,CAAC,KAAK,CAAC,KAAK,IAAI,cAAc,CAAC,EAAzC,CAAyC,CAAC,CAAC;gBAErF,CAAC;gBAzDlB;oBAAC,iBAAU,EAAE;;8BAAA;gBA4Db,iBAAC;YAAD,CA3DA,AA2DC,IAAA;YA3DD,mCA2DC,CAAA","file":"log/services/logService.service.js","sourcesContent":["/* * * ./app/comments/components/comment.service.ts * * */\n// Imports\nimport { Injectable }     from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\nimport { Log }           from '../model/log.model';\nimport {Observable} from 'rxjs/Rx';\nimport {SharedService} from '../../SharedService'\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport { DatePipe } from '@angular/common';\n@Injectable()\nexport class LogService {\n     userData: any;\n     private date;\n     private user_email;\n     // Resolve HTTP using the constructor\n     constructor (private http: Http,private ss:SharedService,private datePipe: DatePipe) {}\n\n CheckIn (email): Observable<Log[]> {\n\n         this.date =  new Date();\n         this.date = this.datePipe.transform(this.date, 'dd MM yyyy HH:mm:ss');\n         console.log(this.date);\n        var bodyString = 'user_email='+email +'&checkin='+this.date;\n\n        let headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded'});\n\n        let options = new RequestOptions({ headers: headers }); // Create a request option\n\n        return this.http.post('/checkin', bodyString, options) // ...using post request\n                         .map(response => { return response.json()}) // ...and calling .json() on the response to return data\n                         .catch((error:any) => Observable.throw(error || 'Server error' )); //...errors if any\n    }\n\n    CheckOut (email,log_id): Observable<Log[]> {\n            this.date = new Date();\n            this.date = this.datePipe.transform(this.date, 'dd MM yyyy HH:mm:ss');\n\n           var bodyString = 'user_email='+email +'&checkin='+this.date+ '&log_id=' + log_id;\n\n           let headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded'});\n\n           let options = new RequestOptions({ headers: headers }); // Create a request option\n\n           return this.http.post('/checkout', bodyString, options) // ...using post request\n                            .map(response => { return response.json()}) // ...and calling .json() on the response to return data\n                            .catch((error:any) => Observable.throw(error || 'Server error' )); //...errors if any\n       }\n       getLogs() : Observable<any>{\n            this.user_email = this.ss.getUserDetail();\n                // ...using get request\n                return this.http.get('/logs/' + this.user_email.email)\n                               // ...and calling .json() on the response to return data\n                                .map(response => { return response.json()})\n                                //...errors if any\n                                .catch((error:any) => Observable.throw(error || 'Server error'));\n\n            }\n\n            logout() : Observable<any>{\n                     // ...using get request\n                     return this.http.get('/logout')\n                                    // ...and calling .json() on the response to return data\n                                     .map(response => { return response.json()})\n                                     //...errors if any\n                                     .catch((error:any) => Observable.throw(error || 'Server error'));\n\n                 }\n\n\n}\n"],"sourceRoot":"/source/"}